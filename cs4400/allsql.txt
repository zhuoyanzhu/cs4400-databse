
/*create user table */
CREATE TABLE User (
username VARCHAR(30) PRIMARY KEY,
email VARCHAR(50) UNIQUE, 
password VARCHAR(30) NOT NULL,
year ENUM('freshman', 'sophomore', 'junior', 'senior'),
major VARCHAR(50),
usertype ENUM('0', '1'),
FOREIGN KEY (major) REFERENCES Major(name))

/*update user's major*/
UPDATE User SET major="major" WHERE username="username"

/*update user's year*/
UPDATE User SET year="year" WHERE username="username"

/*drop table user*/
DROP TABLE User

/*insert student into user table*/
INSERT INTO User (
username,email,password,usertype) 
VALUES("username", "email", "password", '1')

/*insert admin into user table*/
INSERT INTO User (
username,password,usertype) 
VALUES("username", "password", '0')


/*select from user*/
SELECT * FROM User 
WHERE username="username" AND password="password"

/*get a user's major*/
SELECT major FROM User 
WHERE Username="username"

/*get a user's year*/
SELECT year FROM User 
WHERE Username="username"

/*create project table*/
CREATE TABLE Project (
name VARCHAR(50) PRIMARY KEY,
description TEXT NOT NULL,
est_num INT NOT NULL,
adivisor_name VARCHAR(30) NOT NULL,
adivisor_email VARCHAR(50) UNIQUE NOT NULL,
designation_name VARCHAR(30) NOT NULL,
FOREIGN KEY (designation_name) REFERENCES Designation(name))

/*drap project table*/
DROP TABLE Project

/*insert into project table*/
INSERT INTO Project VALUES
("name", "description", "est_num", "adivisor_name", "adivisor_email", "designation_name")

/*select from project table*/
SELECT * FROM Project WHERE name="name"

/*create project requriment*/
CREATE TABLE Project_requirement (
name VARCHAR(50) NOT NULL,
requirement VARCHAR(100) NOT NULL,
PRIMARY KEY(name, requirement),
FOREIGN KEY (name) REFERENCES Project(name))

/*drop project requriment*/
DROP TABLE Project_requirement

/*insert into project requriment*/
INSERT INTO Project_requirement VALUES("name", "requirement")

/*get requirement*/
SELECT requirement FROM Project_requirement WHERE name="name"

/*create Designation*/
CREATE TABLE Designation (
name VARCHAR(30) PRIMARY KEY)

/*drop Designation*/
DROP TABLE Designation

/*insert into Designation*/
INSERT INTO Designation VALUES("name")

/*get all descriptions*/
SELECT * FROM Designation

/*create table category*/
CREATE TABLE Category (
name VARCHAR(50) PRIMARY KEY)

/*drop category*/
DROP TABLE Category

/*insert into category*/
INSERT INTO Category VALUES("name")

/*get all Category*/
SELECT * FROM Category

/*create table major*/
CREATE TABLE Major (
name VARCHAR(50) PRIMARY KEY,
dept_name VARCHAR(50) NOT NULL,
FOREIGN KEY (dept_name) REFERENCES Department(name))

/*drop major*/
DROP TABLE Major

/*insert into major*/
INSERT INTO Major VALUES("name", "dept_name")

/*get department's major*/
SELECT dept_name FROM Major WHERE name="name"

/*get all majors*/
SELECT name FROM Major

/*create department table*/
CREATE TABLE Department (
name VARCHAR(30) PRIMARY KEY)

/*drop Department*/
DROP TABLE Department

/*insert into Department*/
INSERT INTO Department VALUES("name")

/*get all departments*/
SELECT name FROM Department

/*create project course*/
CREATE TABLE Course (
name VARCHAR(100) PRIMARY KEY,
course_number VARCHAR(50) UNIQUE NOT NULL,
instructor VARCHAR(30) NOT NULL,
est_num INT NOT NULL,
designation_name VARCHAR(30) NOT NULL,
FOREIGN KEY (designation_name) REFERENCES Designation(name))

/*drop table course*/
DROP TABLE Course

/*insert into course*/
INSERT INTO Course VALUES("name", "course_number", "instructor", "est_num", "designation_name")

/*create table apply*/
CREATE TABLE Apply (
project_name VARCHAR(50) NOT NULL,
student_name VARCHAR(50) NOT NULL,
date DATE NOT NULL,
status ENUM('pending', 'accepted', 'rejected') NOT NULL,
PRIMARY KEY(student_name, project_name),
FOREIGN KEY(student_name) REFERENCES User(username),
FOREIGN KEY(project_name) REFERENCES Project(name));

/*drop table apply*/
DROP TABLE Apply

/*insert into apply*/
INSERT INTO Apply 
VALUES("project_name", "student_name", "date", "status")

/*accept apply*/
UPDATE Apply SET status='accepted' 
WHERE project_name='name1' AND student_name='name2'

/*reject apply*/
UPDATE Apply SET status='rejected' 
WHERE project_name='name1' AND student_name='name2'

/*create table Project_is_category*/
CREATE TABLE Project_is_category (
project_name VARCHAR(50) NOT NULL,
category_name VARCHAR(50) NOT NULL,
PRIMARY KEY(category_name, project_name),
FOREIGN KEY(category_name) REFERENCES Category(name),
FOREIGN KEY(project_name) REFERENCES Project(name))

/*drop table Project_is_category*/
DROP TABLE Project_is_category

/*insert into Project_is_category*/
INSERT INTO Project_is_category 
VALUES("project_name", "category_name")

/*getProjectCategory*/
SELECT category_name FROM Project_is_category 
WHERE project_name="name"

/*create table Course_is_category*/
CREATE TABLE Course_is_category (
course_name VARCHAR(100) NOT NULL,
category_name VARCHAR(50) NOT NULL,
PRIMARY KEY(category_name, course_name),
FOREIGN KEY(category_name) REFERENCES Category(name),
FOREIGN KEY(course_name) REFERENCES Course(name))

/*drop table Course_is_category*/
DROP TABLE Course_is_category

/*insert into table Course_is_category*/
INSERT INTO Course_is_category VALUES("course_name", "category_name")

/*getCourseCategory*/
SELECT category_name FROM Course_is_category 
WHERE course_name="name"

/*selectApplyStatus*/
SELECT project_name AS Project,  major AS ApplicantMajor, year AS ApplicantYear, status, User.username AS name 
FROM Apply INNER JOIN User ON User.username=Apply.student_name

/*selectNumOfApply*/
SELECT project_name AS Project,  count(student_name) AS Number 
FROM Apply GROUP BY project_name ORDER BY number DESC LIMIT 10

/*get all application number*/
SELECT count(*) AS number
FROM Apply

/*get all acception number*/
SELECT count(*) AS number 
FROM Apply WHERE status='accepted'

/*report*/
(((SELECT project_name AS Project, count(student_name) 
AS number FROM Apply WHERE status='accepted' GROUP BY project_name) 
UNION (SELECT project_name AS Project, 0 FROM Apply GROUP BY project_name 
HAVING COUNT(status IN ('accepted') OR NULL)=0))AS number2)
SELECT res1.Project, res1.NumberofApplicant, res1.accepterate, res2.Major 
FROM (SELECT number1.Project, number1.number AS NumberofApplicant, (number2.number * 100 / number1.number) AS accepterate 
FROM ((SELECT project_name AS Project, count(student_name) AS number FROM Apply GROUP BY project_name) AS number1) 
INNER JOIN (((SELECT project_name AS Project, count(student_name) AS number 
FROM Apply WHERE status='accepted' GROUP BY project_name) 
UNION (SELECT project_name AS Project, 0 
FROM Apply GROUP BY project_name 
HAVING COUNT(status IN ('accepted') OR NULL)=0))AS number2) 
ON number1.Project=number2.Project) AS res1 
INNER JOIN (SELECT p.project_name AS Project, substring_index(GROUP_CONCAT(p.major 
ORDER BY p.number DESC SEPARATOR '/'), '/', 3) AS Major 
FROM ((SELECT project_name, major, count(*) AS number 
FROM Apply INNER JOIN User ON User.username=Apply.student_name 
GROUP BY Apply.project_name, User.major) AS p) GROUP BY p.project_name) AS res2 ON res1.Project=res2.Project 
ORDER BY accepterate DESC
 
 
 /*select Course*/
SELECT * FROM(SELECT DISTINCT course_name FROM Course_is_category 
WHERE category_name IN ("cateogry1", "category2") 
GROUP BY course_name HAVING COUNT(DISTINCT category_name)=2) AS res1 
INNER JOIN (SELECT * FROM Course WHERE (name='name' OR 'name'='') 
AND (designation_name='name2' OR 'name2'='')) AS res2 ON res1.course_name=res2.name
 
 /*select project*/
 SELECT DISTINCT * FROM (SELECT DISTINCT project_name FROM Project_is_category 
 WHERE category_name IN ("cateogry1", "category2") 
 GROUP BY project_name HAVING COUNT(DISTINCT category_name)=2) AS res1 
 INNER JOIN (SELECT * FROM Project WHERE (name='name' OR 'ma,e'='') 
 AND (designation_name='Community' OR 'Community'='')) AS res2 
 INNER JOIN (SELECT name FROM Project_requirement 
 WHERE (requirement LIKE '%Computer Science%' 
 OR requirement LIKE '%College of Computing%' )
 AND requirement LIKE '%Freshman%') AS res3 
 WHERE res1.project_name=res2.name AND res2.name=res3.name 
 
/*get student's applications*/
 SELECT project_name, date, status FROM Apply
  WHERE student_name="name"



